generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id               Int               @id @default(autoincrement())
    email            String            @unique
    fullName         String
    password         String
    role             Role              @default(USER)
    provider         String?
    providerId       String?
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    cart             Cart?
    verificationCode VerificationCode?
    verified         DateTime?
    orders           Order[]
}

model Category {
    id        Int       @id @default(autoincrement())
    name      String    @unique
    products  Product[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Product {
    id          Int           @id @default(autoincrement())
    name        String
    imageUrl    String
    category    Category      @relation(fields: [categoryId], references: [id])
    categoryId  Int
    ingredients Ingredient[]
    items       ProductItem[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
}

model ProductItem {
    id        Int        @id @default(autoincrement())
    price     Int
    size      Int?
    type      Int?
    product   Product    @relation(fields: [productId], references: [id])
    productId Int
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    cartItems CartItem[]
}

model Ingredient {
    id        Int        @id @default(autoincrement())
    name      String
    imageUrl  String
    price     Int
    products  Product[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    cartItems CartItem[]
}

model Cart {
    id          Int        @id @default(autoincrement())
    user        User?      @relation(fields: [userId], references: [id])
    userId      Int?       @unique
    token       String
    items       CartItem[]
    totalAmount Int
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

model CartItem {
    id            Int          @id @default(autoincrement())
    quantity      Int
    productItem   ProductItem  @relation(fields: [productItemId], references: [id])
    productItemId Int
    cart          Cart         @relation(fields: [cartId], references: [id])
    cartId        Int
    ingredients   Ingredient[]
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
}

model Order {
    id          Int         @id @default(autoincrement())
    user        User?       @relation(fields: [userId], references: [id])
    userId      Int?
    token       String
    totalAmount Int
    status      OrderStatus
    paymentId   String?
    items       Json
    fullName    String
    address     String
    phone       String
    email       String
    comment     String?
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model VerificationCode {
    id        Int      @id @default(autoincrement())
    code      String
    user      User     @relation(fields: [userId], references: [id])
    userId    Int      @unique
    createdAt DateTime @default(now())

    @@unique([userId, code])
}

enum OrderStatus {
    PENDING
    COMPLETED
    CANCELLED
}

enum Role {
    USER
    ADMIN
}
